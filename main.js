// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let steps = 0;
let coins = 0;
let health = 5;
let maxHealth = 5;
let baseDamage = 1;
let damageModifier = 0;
let kills = 0;
let inBattle = false;
let enemyHealth = 0;
let enemyMaxHealth = 5;
let enemyDamage = 1;
let enemyType = "normal";
let enemyAttackTime = 3000;
let dodgesLeft = 3;
let isPlayerTurn = true;
let defendMode = false;
let inventory = [];
let rageActive = false;
let enemyAttackTimeout = null;
let defense = 0;
let miningActive = false;
let miningProgress = 0;
let miningRequired = 40;
let chestFound = false;
let fakultetActive = false;
let qteCircles = [];
let qteTimeout = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const stepBtn = document.getElementById('stepBtn');
const battleActions = document.getElementById('battleActions');
const battleTitle = document.getElementById('battleTitle');
const enemyName = document.getElementById('enemyName');
const enemyStats = document.getElementById('enemyStats');
const attackBtn = document.getElementById('attackBtn');
const defendBtn = document.getElementById('defendBtn');
const dodgeBtn = document.getElementById('dodgeBtn');
const shop = document.getElementById('shop');
const spearBtn = document.getElementById('spearBtn');
const fakultetBtn = document.getElementById('fakultetBtn');
const glovesBtn = document.getElementById('glovesBtn');
const swordBtn = document.getElementById('swordBtn');
const bowBtn = document.getElementById('bowBtn');
const armorBtn = document.getElementById('armorBtn');
const healthBtn = document.getElementById('healthBtn');
const lifeOrbBtn = document.getElementById('lifeOrbBtn');
const healthPotionBtn = document.getElementById('healthPotionBtn');
const rageOrbBtn = document.getElementById('rageOrbBtn');
const pickaxeBtn = document.getElementById('pickaxeBtn');
const miningContainer = document.getElementById('miningContainer');
const chestContainer = document.getElementById('chestContainer');

// –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById('steps').textContent = steps;
    document.getElementById('coins').textContent = coins;
    document.getElementById('kills').textContent = kills;
    document.getElementById('defense').textContent = `${defense}%`;
    
    // –†–∞—Å—Å—á–µ—Ç —É—Ä–æ–Ω–∞
    const damage = baseDamage + damageModifier;
    document.getElementById('damage').textContent = damage > 1 ? `${damage} (${baseDamage}+${damageModifier})` : damage;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –∏–≥—Ä–æ–∫–∞
    const hpPercent = (health / maxHealth) * 100;
    document.getElementById('hpBar').style.width = `${hpPercent}%`;
    document.getElementById('hpText').textContent = `${health}/${maxHealth}`;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –≤—Ä–∞–≥–∞
    if (inBattle) {
        const enemyHpPercent = (enemyHealth / enemyMaxHealth) * 100;
        document.getElementById('enemyHpBar').style.width = `${enemyHpPercent}%`;
        document.getElementById('enemyHpText').textContent = enemyHealth;
        document.getElementById('enemyHpFullText').textContent = `${enemyHealth}/${enemyMaxHealth}`;
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const inventoryItems = document.getElementById('inventoryItems');
    if (inventory.length === 0) {
        inventoryItems.innerHTML = '–ü—É—Å—Ç–æ';
    } else {
        inventoryItems.innerHTML = '';
        inventory.forEach(item => {
            const itemEl = document.createElement('div');
            itemEl.className = 'inventory-item';
            itemEl.textContent = item;
            
            // –û—Å–æ–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if (item === '–ö–∏—Ä–∫–∞' && miningActive) {
                itemEl.style.backgroundColor = '#f39c12';
                itemEl.onclick = () => mineMineral();
            } else if (item === '–°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏' || item === '–°—Ñ–µ—Ä–∞ —è—Ä–æ—Å—Ç–∏' || item === '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è') {
                itemEl.onclick = () => useItem(item);
            } else {
                itemEl.style.cursor = 'default';
            }
            
            inventoryItems.appendChild(itemEl);
        });
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω –∫–∞–∂–¥—ã–µ 10 —à–∞–≥–æ–≤
    if (steps > 0 && steps % 10 === 0 && !inBattle && !miningActive) {
        shop.style.display = 'block';
        
        // 50% —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —Å—É–Ω–¥—É–∫
        if (!chestFound && Math.random() < 0.5) {
            chestContainer.innerHTML = '<button id="chestBtn" style="background-color:#f1c40f;color:#000;">üéÅ –°—É–Ω–¥—É–∫ (100 –º–æ–Ω–µ—Ç)</button>';
            document.getElementById('chestBtn').addEventListener('click', openChest);
            chestFound = true;
        }
    } else {
        shop.style.display = 'none';
    }
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞
    attackBtn.disabled = !isPlayerTurn || !inBattle;
    defendBtn.disabled = !isPlayerTurn || !inBattle;
    dodgeBtn.disabled = !inBattle || dodgesLeft <= 0;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –¥–ª—è –§–ê–ö–£–õ–¨–¢–ï–¢–ê
    if (fakultetActive && damageModifier >= 15) {
        stepBtn.classList.add('max-damage');
    } else {
        stepBtn.classList.remove('max-damage');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥
function addLog(message) {
    const log = document.getElementById('log');
    const entry = document.createElement('div');
    entry.className = 'log-entry';
    entry.textContent = message;
    log.prepend(entry);
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ
    if (log.children.length > 10) {
        log.removeChild(log.lastChild);
    }
}

// –§—É–Ω–∫—Ü–∏—è —à–∞–≥–∞
function makeStep() {
    if (inBattle || miningActive) return;
    
    steps++;
    chestFound = false;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
    const coinsEarned = Math.floor(Math.random() * 25) + 1;
    coins += coinsEarned;
    addLog(`–í—ã —Å–¥–µ–ª–∞–ª–∏ —à–∞–≥ –∏ –ø–æ–ª—É—á–∏–ª–∏ ${coinsEarned} –º–æ–Ω–µ—Ç!`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å –≤—Ä–∞–≥–æ–º (30% —à–∞–Ω—Å)
    if (Math.random() < 0.3) {
        startBattle();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∏–Ω–µ—Ä–∞–ª–∞ (5% —à–∞–Ω—Å, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∏—Ä–∫–∞)
    if (inventory.includes('–ö–∏—Ä–∫–∞') && Math.random() < 0.05) {
        startMining();
    }
    
    updateUI();
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –±–∏—Ç–≤—ã
function startBattle() {
    inBattle = true;
    dodgesLeft = 3;
    isPlayerTurn = true;
    defendMode = false;
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
    if (steps === 50) {
        // –ë–æ—Å—Å - –ö–æ—Ä–æ–ª—å —Å–ª–∏–∑–Ω–µ–π
        enemyType = "slime_king";
        enemyMaxHealth = 100;
        enemyDamage = "2-5";
        enemyAttackTime = 2000;
        battleTitle.textContent = "üëë –ë–æ—Å—Å: –ö–æ—Ä–æ–ª—å —Å–ª–∏–∑–Ω–µ–π üëë";
    } else if (steps === 100) {
        // –ë–æ—Å—Å - –¢—ë–º–Ω—ã–π –ª–æ—Ä–¥
        enemyType = "dark_lord";
        enemyMaxHealth = 200;
        enemyDamage = 2;
        enemyAttackTime = 1500;
        battleTitle.textContent = "üëë –ë–æ—Å—Å: –¢—ë–º–Ω—ã–π –ª–æ—Ä–¥ üëë";
    } else if (steps >= 60) {
        // –°–∏–ª—å–Ω—ã–π —Å–ª–∏–∑–µ–Ω—å
        enemyType = "strong_slime";
        enemyMaxHealth = 60;
        enemyDamage = 4;
        enemyAttackTime = Math.random() * 750 + 750; // 0.75-1.5 —Å–µ–∫
        battleTitle.textContent = "‚öîÔ∏è –ë–∏—Ç–≤–∞! ‚öîÔ∏è";
    } else if (steps >= 30) {
        // –°–ª–∞–±–∞—è —Å–ª–∏–∑—å
        enemyType = "weak_slime";
        enemyMaxHealth = 30;
        enemyDamage = 2;
        enemyAttackTime = Math.random() * 750 + 750; // 0.75-1.5 —Å–µ–∫
        battleTitle.textContent = "‚öîÔ∏è –ë–∏—Ç–≤–∞! ‚öîÔ∏è";
    } else {
        // –û–±—ã—á–Ω—ã–π –≤—Ä–∞–≥
        enemyType = "normal";
        if (steps >= 60) {
            enemyMaxHealth = 35;
            enemyDamage = 3;
        } else if (steps >= 20) {
            enemyMaxHealth = 15;
            enemyDamage = 2;
        } else {
            enemyMaxHealth = 5;
            enemyDamage = 1;
        }
        enemyAttackTime = 3000;
        battleTitle.textContent = "‚öîÔ∏è –ë–∏—Ç–≤–∞! ‚öîÔ∏è";
    }
    
    enemyHealth = enemyMaxHealth;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–∞–≥–µ
    enemyName.textContent = getEnemyName(enemyType);
    enemyStats.textContent = `HP: ${enemyMaxHealth}, –£—Ä–æ–Ω: ${enemyDamage}` + 
                            (enemyType.includes("slime") ? `, –ê—Ç–∞–∫–∞: ${(enemyAttackTime/1000).toFixed(2)}—Å` : "");
    
    battleActions.style.display = 'block';
    stepBtn.disabled = true;
    
    addLog(`–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ ${getEnemyName(enemyType)}! (${enemyMaxHealth} HP, –£—Ä–æ–Ω: ${enemyDamage}) –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–∏—Ç–≤–∞!`);
    updateUI();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤—Ä–∞–≥–∞
function getEnemyName(type) {
    switch(type) {
        case "slime_king": return "–ö–æ—Ä–æ–ª—å —Å–ª–∏–∑–Ω–µ–π";
        case "dark_lord": return "–¢—ë–º–Ω—ã–π –ª–æ—Ä–¥";
        case "strong_slime": return "–°–∏–ª—å–Ω—ã–π —Å–ª–∏–∑–µ–Ω—å";
        case "weak_slime": return "–°–ª–∏–∑–µ–Ω—å";
        default: return "–í—Ä–∞–≥";
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∏—Ç–≤—ã
function endBattle(victory = true) {
    if (victory) {
        kills++;
        if (fakultetActive && damageModifier < 15) {
            damageModifier++;
            addLog(`–§–ê–ö–£–õ–¨–¢–ï–¢: +1 –∫ —É—Ä–æ–Ω—É! –¢–µ–ø–µ—Ä—å —É—Ä–æ–Ω: ${baseDamage + damageModifier}`);
        }
    }
    
    inBattle = false;
    battleActions.style.display = 'none';
    stepBtn.disabled = false;
    
    // –û—á–∏—Å—Ç–∫–∞ QTE –¥–ª—è –±–æ—Å—Å–∞
    clearQTE();
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞
    if (enemyAttackTimeout) {
        clearTimeout(enemyAttackTimeout);
        enemyAttackTimeout = null;
    }
    
    updateUI();
}

// –§—É–Ω–∫—Ü–∏—è –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞
function playerAttack() {
    if (!isPlayerTurn || !inBattle) return;
    
    let attackDamage = baseDamage + damageModifier;
    if (rageActive) {
        attackDamage *= 2;
        rageActive = false;
        addLog('–°—Ñ–µ—Ä–∞ —è—Ä–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –£—Ä–æ–Ω —É–¥–≤–æ–µ–Ω!');
    }
    
    // –î–ª—è –ª—É–∫–∞ - —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–Ω –æ—Ç 3 –¥–æ 6
    if (inventory.includes('–õ—É–∫')) {
        attackDamage = Math.floor(Math.random() * 4) + 3;
        addLog(`–í—ã —Å—Ç—Ä–µ–ª—è–µ—Ç–µ –∏–∑ –ª—É–∫–∞ –∏ –Ω–∞–Ω–æ—Å–∏—Ç–µ ${attackDamage} —É—Ä–æ–Ω–∞!`);
    } else {
        addLog(`–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ –≤—Ä–∞–≥–∞ –∏ –Ω–∞–Ω–æ—Å–∏—Ç–µ ${attackDamage} —É—Ä–æ–Ω–∞!`);
    }
    
    enemyHealth -= attackDamage;
    
    if (enemyHealth <= 0) {
        enemyHealth = 0;
        addLog(`–í—ã –ø–æ–±–µ–¥–∏–ª–∏ ${getEnemyName(enemyType)}!`);
        endBattle();
        return;
    }
    
    isPlayerTurn = false;
    updateUI();
    
    // –•–æ–¥ –≤—Ä–∞–≥–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    enemyAttackTimeout = setTimeout(enemyTurn, enemyAttackTime);
    
    // –î–ª—è —Ç—ë–º–Ω–æ–≥–æ –ª–æ—Ä–¥–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º QTE
    if (enemyType === "dark_lord") {
        startQTE();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—Ç—ã –∏–≥—Ä–æ–∫–∞
function playerDefend() {
    if (!isPlayerTurn || !inBattle) return;
    
    defendMode = true;
    addLog('–í—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ –∑–∞—â–∏—Ç–µ!');
    
    isPlayerTurn = false;
    updateUI();
    
    // –•–æ–¥ –≤—Ä–∞–≥–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    enemyAttackTimeout = setTimeout(enemyTurn, enemyAttackTime);
    
    // –î–ª—è —Ç—ë–º–Ω–æ–≥–æ –ª–æ—Ä–¥–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º QTE
    if (enemyType === "dark_lord") {
        startQTE();
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–æ—Ä–æ—Ç–∞ –∏–≥—Ä–æ–∫–∞
function playerDodge() {
    if (!inBattle || dodgesLeft <= 0) return;
    
    dodgesLeft--;
    addLog('–í—ã —É–≤–µ—Ä–Ω—É–ª–∏—Å—å –æ—Ç –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞!');
    
    // –ï—Å–ª–∏ —É–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ –∞—Ç–∞–∫—É
    if (!isPlayerTurn && enemyAttackTimeout) {
        clearTimeout(enemyAttackTimeout);
        isPlayerTurn = true;
        addLog('–í—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É!');
        clearQTE();
    }
    
    updateUI();
}

// –•–æ–¥ –≤—Ä–∞–≥–∞
function enemyTurn() {
    if (!inBattle) return;
    
    // 15% —à–∞–Ω—Å —á—Ç–æ –≤—Ä–∞–≥ –ø—Ä–æ–º–∞—Ö–Ω–µ—Ç—Å—è (–∫—Ä–æ–º–µ –±–æ—Å—Å–æ–≤)
    if (enemyType !== "slime_king" && enemyType !== "dark_lord" && Math.random() < 0.15) {
        addLog('–í—Ä–∞–≥ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!');
        isPlayerTurn = true;
        updateUI();
        return;
    }
    
    let damageTaken = typeof enemyDamage === 'string' ? 
        Math.floor(Math.random() * 4) + 2 : // –î–ª—è –∫–æ—Ä–æ–ª—è —Å–ª–∏–∑–Ω–µ–π 2-5 —É—Ä–æ–Ω–∞
        enemyDamage;
    
    // –£—á–µ—Ç –∑–∞—â–∏—Ç—ã
    if (defense > 0) {
        const damageReduction = Math.floor(damageTaken * (defense / 100));
        damageTaken -= damageReduction;
        addLog(`–í–∞—à–∞ –±—Ä–æ–Ω—è —É–º–µ–Ω—å—à–∏–ª–∞ —É—Ä–æ–Ω –Ω–∞ ${damageReduction}!`);
    }
    
    if (defendMode) {
        damageTaken = Math.max(1, Math.floor(damageTaken * 0.5));
        addLog(`–í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç, –Ω–æ –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —á–∞—Å—Ç—å —É—Ä–æ–Ω–∞! (–ü–æ–ª—É—á–µ–Ω–æ ${damageTaken} —É—Ä–æ–Ω–∞)`);
        defendMode = false;
    } else {
        addLog(`–í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${damageTaken} —É—Ä–æ–Ω–∞!`);
    }
    
    health -= damageTaken;
    
    if (health <= 0) {
        health = 0;
        addLog('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.');
        endBattle(false);
        stepBtn.disabled = true;
        return;
    }
    
    isPlayerTurn = true;
    updateUI();
}

// –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function useItem(item) {
    if (item === '–°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏') {
        health = Math.min(health + 10, maxHealth);
        inventory = inventory.filter(i => i !== item);
        addLog('–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –°—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 10 HP!');
    } else if (item === '–°—Ñ–µ—Ä–∞ —è—Ä–æ—Å—Ç–∏') {
        rageActive = true;
        inventory = inventory.filter(i => i !== item);
        addLog('–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –°—Ñ–µ—Ä—É —è—Ä–æ—Å—Ç–∏! –°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω–µ–µ!');
    } else if (item === '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è') {
        health = maxHealth;
        inventory = inventory.filter(i => i !== item);
        addLog('–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ HP!');
    }
    
    updateUI();
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –¥–æ–±—ã—á–∏ –º–∏–Ω–µ—Ä–∞–ª–∞
function startMining() {
    miningActive = true;
    miningProgress = 0;
    miningContainer.style.display = 'block';
    document.getElementById('miningProgress').style.width = '0%';
    addLog('–í—ã –Ω–∞—à–ª–∏ –º–∏–Ω–µ—Ä–∞–ª! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏—Ä–∫—É –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, —á—Ç–æ–±—ã –¥–æ–±—ã—Ç—å –µ–≥–æ.');
    updateUI();
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±—ã—á–∏ –º–∏–Ω–µ—Ä–∞–ª–∞
function mineMineral() {
    if (!miningActive) return;
    
    miningProgress++;
    document.getElementById('miningProgress').style.width = `${(miningProgress / miningRequired) * 100}%`;
    
    if (miningProgress >= miningRequired) {
        const minedCoins = Math.floor(Math.random() * 66) + 60;
        coins += minedCoins;
        addLog(`–í—ã –¥–æ–±—ã–ª–∏ –º–∏–Ω–µ—Ä–∞–ª –∏ –ø–æ–ª—É—á–∏–ª–∏ ${minedCoins} –º–æ–Ω–µ—Ç!`);
        miningActive = false;
        miningContainer.style.display = 'none';
    }
    
    updateUI();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞
function openChest() {
    coins += 100;
    addLog('–í—ã –Ω–∞—à–ª–∏ —Å—É–Ω–¥—É–∫ —Å 100 –º–æ–Ω–µ—Ç–∞–º–∏!');
    chestContainer.innerHTML = '';
    updateUI();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ QTE –¥–ª—è —Ç—ë–º–Ω–æ–≥–æ –ª–æ—Ä–¥–∞
function startQTE() {
    clearQTE();
    
    // –°–æ–∑–¥–∞–µ–º 3 –∫—Ä—É–∂–∫–∞ –≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    for (let i = 0; i < 3; i++) {
        createQTECircle();
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –Ω–µ—É–¥–∞—á–Ω–æ–µ QTE
    qteTimeout = setTimeout(() => {
        if (inBattle && enemyType === "dark_lord") {
            health -= 5;
            addLog('–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∞—Ç–∞–∫—É –¢—ë–º–Ω–æ–≥–æ –ª–æ—Ä–¥–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ 5 —É—Ä–æ–Ω–∞!');
            
            if (health <= 0) {
                health = 0;
                addLog('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.');
                endBattle(false);
                stepBtn.disabled = true;
            } else {
                updateUI();
            }
        }
        clearQTE();
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–∂–∫–∞ QTE
function createQTECircle() {
    const circle = document.createElement('div');
    circle.className = 'boss-qte';
    circle.textContent = '!';
    
    // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    const x = Math.random() * (window.innerWidth - 100) + 50;
    const y = Math.random() * (window.innerHeight - 100) + 50;
    
    circle.style.left = `${x}px`;
    circle.style.top = `${y}px`;
    
    circle.onclick = () => {
        circle.remove();
        qteCircles = qteCircles.filter(c => c !== circle);
        
        // –ï—Å–ª–∏ –≤—Å–µ –∫—Ä—É–∂–∫–∏ –Ω–∞–∂–∞—Ç—ã, –æ—Ç–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
        if (qteCircles.length === 0 && qteTimeout) {
            clearTimeout(qteTimeout);
            addLog('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–∑–∏–ª–∏ –∞—Ç–∞–∫—É –¢—ë–º–Ω–æ–≥–æ –ª–æ—Ä–¥–∞!');
        }
    };
    
    document.body.appendChild(circle);
    qteCircles.push(circle);
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ QTE
function clearQTE() {
    qteCircles.forEach(circle => circle.remove());
    qteCircles = [];
    if (qteTimeout) {
        clearTimeout(qteTimeout);
        qteTimeout = null;
    }
}

// –ü–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
function buySpear() {
    if (coins >= 1000) {
        coins -= 1000;
        baseDamage = 8; // –£—Ä–æ–Ω –Ω–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è, –∑–∞–º–µ–Ω—è–µ—Ç—Å—è
        damageModifier = 0;
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –∫–æ–ø—å—ë! –¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–Ω 8.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–ø—å—è!');
    }
}

function buyFakultet() {
    if (coins >= 2500) {
        coins -= 2500;
        fakultetActive = true;
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –§–ê–ö–£–õ–¨–¢–ï–¢! –¢–µ–ø–µ—Ä—å –∑–∞ –∫–∞–∂–¥–æ–µ —É–±–∏–π—Å—Ç–≤–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –∫ —É—Ä–æ–Ω—É (–º–∞–∫—Å. +15).');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –§–ê–ö–£–õ–¨–¢–ï–¢–ê!');
    }
}

function buySword() {
    if (coins >= 150) {
        coins -= 150;
        baseDamage = 4; // –£—Ä–æ–Ω –Ω–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è, –∑–∞–º–µ–Ω—è–µ—Ç—Å—è
        damageModifier = 0;
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –º–µ—á! –¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–Ω 4.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–µ—á–∞!');
    }
}

function buyBow() {
    if (coins >= 300) {
        coins -= 300;
        baseDamage = 3; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –ª—É–∫–∞
        damageModifier = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –±—É–¥–µ—Ç 6 (3+3)
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –ª—É–∫! –¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–Ω 3-6.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ª—É–∫–∞!');
    }
}

function buyGloves() {
    if (coins >= 100) {
        coins -= 100;
        damageModifier += 2;
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –ø–µ—Ä—á–∞—Ç–∫–∏! –£—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 2.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä—á–∞—Ç–æ–∫!');
    }
}

function buyArmor() {
    if (coins >= 200) {
        coins -= 200;
        defense = 20;
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –∂–µ–ª–µ–∑–Ω—É—é –±—Ä–æ–Ω—é! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ 20% –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±—Ä–æ–Ω–∏!');
    }
}

function buyHealthUpgrade() {
    if (coins >= 25) {
        coins -= 25;
        maxHealth += 1;
        health += 1;
        addLog('–í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 1!');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è!');
    }
}

function buyLifeOrb() {
    if (coins >= 50) {
        coins -= 50;
        inventory.push('–°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏');
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –°—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏!');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –°—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏!');
    }
}

function buyHealthPotion() {
    if (coins >= 150) {
        coins -= 150;
        inventory.push('–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è');
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è!');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ó–µ–ª—å—è –∑–¥–æ—Ä–æ–≤—å—è!');
    }
}

function buyRageOrb() {
    if (coins >= 25) {
        coins -= 25;
        inventory.push('–°—Ñ–µ—Ä–∞ —è—Ä–æ—Å—Ç–∏');
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –°—Ñ–µ—Ä—É —è—Ä–æ—Å—Ç–∏!');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –°—Ñ–µ—Ä—ã —è—Ä–æ—Å—Ç–∏!');
    }
}

function buyPickaxe() {
    if (coins >= 10) {
        coins -= 10;
        inventory.push('–ö–∏—Ä–∫–∞');
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –∫–∏—Ä–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±—ã–≤–∞—Ç—å –º–∏–Ω–µ—Ä–∞–ª—ã.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∏—Ä–∫–∏!');
    }
}

// –°–æ–±—ã—Ç–∏—è –∫–Ω–æ–ø–æ–∫
stepBtn.addEventListener('click', makeStep);
attackBtn.addEventListener('click', playerAttack);
defendBtn.addEventListener('click', playerDefend);
dodgeBtn.addEventListener('click', playerDodge);
spearBtn.addEventListener('click', buySpear);
fakultetBtn.addEventListener('click', buyFakultet);
swordBtn.addEventListener('click', buySword);
bowBtn.addEventListener('click', buyBow);
glovesBtn.addEventListener('click', buyGloves);
armorBtn.addEventListener('click', buyArmor);
healthBtn.addEventListener('click', buyHealthUpgrade);
lifeOrbBtn.addEventListener('click', buyLifeOrb);
healthPotionBtn.addEventListener('click', buyHealthPotion);
rageOrbBtn.addEventListener('click', buyRageOrb);
pickaxeBtn.addEventListener('click', buyPickaxe);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
updateUI();
// ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
let level = 1;
let xp = 0;
let xpToNextLevel = 150;
let chestChance = 10; // 10% —à–∞–Ω—Å –Ω–∞ —Å—É–Ω–¥—É–∫ –≤–º–µ—Å—Ç–æ 50%

// –í —Ñ—É–Ω–∫—Ü–∏–∏ updateUI() –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –æ–ø—ã—Ç–∞:
function updateUI() {
    // ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥)
    document.getElementById('level').textContent = level;
    document.getElementById('xp').textContent = `${xp}/${xpToNextLevel}`;
    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)
}

// –í —Ñ—É–Ω–∫—Ü–∏—é endBattle() –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞:
function endBattle(victory = true) {
    if (victory) {
        // –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
        switch(enemyType) {
            case "slime_king":
            case "dark_lord":
                xp += 50;
                break;
            case "strong_slime":
                xp += 20;
                break;
            case "weak_slime":
                xp += 15;
                break;
            default:
                xp += 5;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        if (xp >= xpToNextLevel) {
            levelUp();
        }
        
        // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)
    }
    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
function levelUp() {
    level++;
    xp -= xpToNextLevel;
    xpToNextLevel = Math.floor(xpToNextLevel * 1.2); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    baseDamage += 1;
    chestChance += 1;
    
    addLog(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${level} —É—Ä–æ–≤–Ω—è!`);
    addLog(`–ë–æ–Ω—É—Å—ã: +1 —É—Ä–æ–Ω, +1% –∫ —à–∞–Ω—Å—É –Ω–∞–π—Ç–∏ —Å—É–Ω–¥—É–∫ (—Ç–µ–ø–µ—Ä—å ${chestChance}%)`);
    
    updateUI();
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ makeStep() –∏–∑–º–µ–Ω—è–µ–º —à–∞–Ω—Å –Ω–∞ —Å—É–Ω–¥—É–∫:
function makeStep() {
    // ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω (–∫–∞–∂–¥—ã–µ 10 —à–∞–≥–æ–≤, –Ω–æ –Ω–µ –Ω–∞ 50, 100 –∏ —Ç.–¥.)
    if (steps > 0 && steps % 10 === 0 && steps % 50 !== 0 && !inBattle && !miningActive) {
        shop.style.display = 'block';
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É–Ω–¥—É–∫ —Å –Ω–æ–≤—ã–º —à–∞–Ω—Å–æ–º
        if (!chestFound && Math.random() < chestChance / 100) {
            chestContainer.innerHTML = '<button id="chestBtn" style="background-color:#f1c40f;color:#000;">üéÅ –°—É–Ω–¥—É–∫ (100 –º–æ–Ω–µ—Ç)</button>';
            document.getElementById('chestBtn').addEventListener('click', openChest);
            chestFound = true;
        }
    } else {
        shop.style.display = 'none';
    }
    
    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:
function buyCoinCase() {
    if (coins >= 25) {
        coins -= 25;
        coins += 5; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 5 –º–æ–Ω–µ—Ç
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –º–æ–Ω–µ—Ç–Ω–∏—Ü—É! –ü–æ–ª—É—á–∏–ª–∏ 5 –º–æ–Ω–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–æ–Ω–µ—Ç–Ω–∏—Ü—ã!');
    }
}

function buyMegaGlove() {
    if (coins >= 2000) {
        coins -= 2000;
        baseDamage = 15;
        damageModifier = 0;
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –º–µ–≥–∞–ø–µ—á–∞—Ç–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–Ω 15.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–µ–≥–∞–ø–µ—á–∞—Ç–∫–∏!');
    }
}

function buyDiamondArmor() {
    if (coins >= 1000) {
        coins -= 1000;
        defense = 50;
        addLog('–í—ã –∫—É–ø–∏–ª–∏ –∞–ª–º–∞–∑–Ω—É—é –±—Ä–æ–Ω—é! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ 50% –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–ª–º–∞–∑–Ω–æ–π –±—Ä–æ–Ω–∏!');
    }
}

function buyGatePlus() {
    if (coins >= 100) {
        coins -= 100;
        maxHealth += 1;
        health += 1;
        addLog('–í—ã –∫—É–ø–∏–ª–∏ +1 —É –≤–æ—Ä–æ—Ç! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 1.');
        updateUI();
    } else {
        addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ +1 —É –≤–æ—Ä–æ—Ç!');
    }
}

// –í –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫:
document.getElementById('coinCaseBtn').addEventListener('click', buyCoinCase);
document.getElementById('megaGloveBtn').addEventListener('click', buyMegaGlove);
document.getElementById('diamondArmorBtn').addEventListener('click', buyDiamondArmor);
document.getElementById('gatePlusBtn').addEventListener('click', buyGatePlus);

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞ —Å –±–∏—Ç–≤–æ–π:
function startBattle() {
    // –í –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º:
    if (inBattle) return;
    
    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)
}
function makeStep() {
    if (inBattle || miningActive) return;
    
    steps++;
    chestFound = false;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
    const coinsEarned = Math.floor(Math.random() * 25) + 1;
    coins += coinsEarned;
    addLog(`–í—ã —Å–¥–µ–ª–∞–ª–∏ —à–∞–≥ –∏ –ø–æ–ª—É—á–∏–ª–∏ ${coinsEarned} –º–æ–Ω–µ—Ç!`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å –≤—Ä–∞–≥–æ–º
    if (steps % 50 === 0) {
        // –ë–∏—Ç–≤–∞ –Ω–∞ –∫–∞–∂–¥–æ–º 50-–º —à–∞–≥—É
        startBattle();
    } else if (steps % 10 === 0) {
        // –ú–∞–≥–∞–∑–∏–Ω –Ω–∞ –∫–∞–∂–¥–æ–º 10-–º —à–∞–≥—É (–∫—Ä–æ–º–µ 50-–≥–æ)
        showShop();
    } else if (Math.random() < enemyChance/100) {
        // –°–ª—É—á–∞–π–Ω–∞—è –±–∏—Ç–≤–∞ —Å –±–∞–∑–æ–≤—ã–º —à–∞–Ω—Å–æ–º
        startBattle();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–µ—Ä–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–∏—Ä–∫–∞)
    if (inventory.includes('–ö–∏—Ä–∫–∞') && Math.random() < 0.05) {
        startMining();
    }
    
    updateUI();
}

function showShop() {
    shop.style.display = 'block';
    // 10% —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —Å—É–Ω–¥—É–∫
    if (!chestFound && Math.random() < chestChance/100) {
        chestContainer.innerHTML = '<button id="chestBtn" style="background-color:#f1c40f;color:#000;">üéÅ –°—É–Ω–¥—É–∫ (100 –º–æ–Ω–µ—Ç)</button>';
        document.getElementById('chestBtn').addEventListener('click', openChest);
        chestFound = true;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
updateUI();
// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
function saveGame() {
    const saveData = {
        steps,
        coins,
        health,
        maxHealth,
        baseDamage,
        damageModifier,
        kills,
        defense,
        inventory,
        level,
        xp
    };
    gameSave.saveGame(saveData);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞
    if (player.checkStepsRecord(steps)) {
        addLog(`–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ —à–∞–≥–æ–≤: ${steps}!`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadGame() {
    const savedData = gameSave.loadGame();
    if (savedData) {
        steps = savedData.steps || 0;
        coins = savedData.coins || 0;
        health = savedData.health || 5;
        maxHealth = savedData.maxHealth || 5;
        baseDamage = savedData.baseDamage || 1;
        damageModifier = savedData.damageModifier || 0;
        kills = savedData.kills || 0;
        defense = savedData.defense || 0;
        inventory = savedData.inventory || [];
        level = savedData.level || 1;
        xp = savedData.xp || 0;
        
        addLog('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
function makeStep() {
    // ... –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ ...
    saveGame(); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('load', () => {
    loadGame();
    updateUI();
});
